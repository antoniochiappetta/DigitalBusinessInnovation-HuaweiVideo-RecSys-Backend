swagger: "2.0"
info:
  description: "HVideo api description"
  version: "0.0.1"
  title: "HVideo"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "hvideo.swagger.io"
basePath: "/api/v1"
tags:
- name: "movie"
  description: "Everything about the movies"
- name: "interaction"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
- name: token
  description: Operations to manage tokens required by api auth.
schemes:
- "https"
paths:
  /movie/{movie_id}:
    get:
      tags: ["movie"]
      summary: "Movies by id"
      description: "Obtain a single movie information by its id"
      operationId: "getMovieById"
      produces: ["application/json", "application/xml"]
      parameters:
      - name: "movie_id"
        in: "path"
        description: "ID of movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Access denied for the API"
        404:
          description: "Movie not found"
      security:
      - api_key: []
  /movie/toppop:
    get:
      tags: ["movie"]
      summary: "Popular movies"
      description: "The paginated list of popular movies"
      produces: ["application/json", "application/xml"]
      operationId: "getTopPopularMovies"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaginatedMovies"
        403:
          description: "Access denied"
      security:
      - api_key: []
  /movie/watched/{user_id}:
    get:
      tags: ["movie"]
      summary: "Watched movies from an user"
      description: "The paginated list of watched movies by the provided user"
      produces: ["application/json", "application/xml"]
      operationId: "getWatchedMoviesByUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
        description: "ID of the user you want to retrieve the watched list of."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaginatedMovies"
        400:
          description: "Invalid ID supplied, e.g. not an integer"
        403:
          description: "Access denied"
        404:
          description: "User not found"
      security:
      - api_key: []
  /movie/recommended/{user_id}:
    get:
      tags: ["movie"]
      summary: "Popular movies"
      description: "The paginated list of popular movies"
      produces: ["application/json", "application/xml"]
      operationId: "getRecommendedMoviesByUser"
      parameters:
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
        description: "ID of the user you want to retrieve the recommendation list of."
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaginatedMovies"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Access denied"
        404:
          description: "User not found"
      security:
      - api_key: []
  /movie/searchByKeywords:
    get:
      tags: ["movie"]
      summary: "Finds Movies by keyword"
      description: "Multiple keywords can be provided with comma separated strings"
      operationId: "findMoviesByKeywords"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "q"
        in: "query"
        description: "Keyword values that need to be considered for filter (free form text)"
        required: true
        type: "string"
        collectionFormat: "multi"
      - name: "page"
        in: query
        description: "The number of page requested. Not mandatory parameter."
        required: false
        type: integer
        format: int32
      - name: "per_page"
        in: query
        description: "The number of movies per page. Not mandatory parameter."
        required: false
        type: integer
        format: int32
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PaginatedMovies"
        400:
          description: "Invalid page or per_page attributes"
        404:
          description: "Page not found"
        403:
          description: "Access denied"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Register a user"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "created"
          schema:
            $ref: "#/definitions/User"
        405:
          description: "invalid input"
  /token:
    post:
      tags:
      - "token"
      summary: "Logs user into the system"
      description: "Use base64 encoded http basic auth in header + https"
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Token"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        429:
          description: "Too many requests"
        404:
          description: "Invalid username/password supplied"
      security:
      - basic_auth: []
    delete:
      tags:
      - "token"
      summary: "Revoke user's token"
      description: "Delete the current toker, so log out the user"
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        204:
          description: "No content"
        403:
          description: "Access denied"
      security:
      - api_key: []
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get the logged user"
      description: "Only possible if the loged user has id same as requested"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        403:
          description: "Access denied"
      security:
      - api_key: []
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "No content"
        403:
          description: "Access denied"
        405:
          description: "Invalid input"
      security:
      - api_key: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user. Requires basic (login username and password) auth."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "No content"
        403:
          description: "Access denied"
      security:
      - basic_auth: []
  /interaction:
    post:
      tags:
      - "interaction"
      summary: "User interacts with movie"
      description: "Register a user interaction with the a movie. Either explicit or implicit. If the rating is explicit and already existing, then override it."
      operationId: createInteractionUserMovie
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "interaction"
        schema:
          $ref: "#/definitions/Interaction"
        in: body
        required: true
      responses:
        201:
          description: "Created"
        403:
          description: "Access denied, user not found or no token"
        404:
          description: "Movie not found"
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /interaction/{user_id}:{movie_id}/explicit:
    get:
      tags:
      - "interaction"
      summary: "Get the explicit rate"
      description: "Get the explicit rate by the user for a specific movie"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "user_id"
        in: path
        required: true
        type: integer
        format: int64
      - name: "movie_id"
        in: path
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: "Succed, the explicit rating given"
          schema:
            $ref: "#/definitions/Interaction"
        400:
          description: "Invalid parameters or not existing"
        404:
          description: "Rate missing for this movie from this user"
      security:
      - api_key: []
/interaction/{user_id}:{movie_id}/implicit:
    get:
      tags:
      - "interaction"
      summary: "Get the implicit rate"
      description: "Get the implicit rate by the user for a specific movie. If the user has rated the movie, will be returned the same rate without score."
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "user_id"
        in: path
        required: true
        type: integer
        format: int64
      - name: "movie_id"
        in: path
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: "Succeed, the implicit rating (user_id, movie_id and TS)"
          schema:
            $ref: "#/definitions/Interaction"
        400:
          description: "Invalid parameters or not existing"
        404:
          description: "Rate missing for this movie from this user"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  basic_auth:
    type: "basic"
definitions:
  User:
    type: "object"
    required:
    - "username"
    - "firstname"
    - "lastname"
    - "email"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        description: "Never provided in GETs"
      _links:
        type: "array"
        xml:
          name: "_links"
        items:
          type: "object"
          properties:
            self:
              type: "string"
              description: "Link to this user resource"
            watched_movies:
              type: "string"
              description: "Link to watched movies list"
            recommended_movies:
              type: "string"
              description: "Link to recommended movies list"
    xml:
      name: "User"
  Movie:
    type: "object"
    required:
    - "title"
    - "description"
    - "trailer"
    properties:
      id:
        type: "integer"
        format: "int64"
      imdbId:
        type: "integer"
        format: "int64"
      tmdbId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Pulp Fiction"
      description:
        type: "string"
        example: "A movie with John Travolta"
      rating:
        type: "object"
        properties:
          score:
            type: "number"
            minimum: 1.0
            maximum: 5.0
          support:
            type: integer
            format: int32
            minimum: 0
      _links:
        type: "array"
        xml:
          name: "_links"
        items:
          type: "object"
          properties:
            self:
              type: "string"
              description: "The link to this movie resource"
            video:
              type: "string"
              description: "The link to the video resource (youtube link for semplicity)"
    xml:
      name: "movie"
  PaginatedMovies:
    type: "object"
    properties:
      items:
        type: "array"
        xml:
          name: "movies"
          wrapped: true
        items:
          $ref: '#/definitions/Movie'
      _meta:
        type: "array"
        xml:
          name: "_meta"
          wrapped: true
        items:
          type: "object"
          properties:
            page:
              type: "integer"
              format: "int32"
            per_page:
              type: "integer"
              format: "int32"
            total_pages:
              type: "integer"
              format: "int32"
            total_items:
              type: "integer"
              format: "int32"
      _links:
        type: "array"
        xml:
          name: "_links"
          wrapped: true
        items:
          type: "object"
          properties:
            self:
              type: "string"
              description: "The link to this page"
            next:
              type: "string"
              description: "The link to next page. Might be null."
            prev:
              type: "string"
              description: "The link to prev page. Might be equal to \"null\"."
    xml:
      name: "paginated_movies"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  Token:
    type: object
    description: "Simple token for now, might become JWT later on."
    properties:
      token:
        type: string
        description: "Base64 encoded token code"
        format: byte
      sub:
        type: string
        description: "The subject of the token, in our case user id"
  Interaction:
    type: "object"
    required:
    - "user_id"
    - "movie_id"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      movie_id:
        type: "integer"
        format: "int64"
      rating:
        type: "integer"
        format: "int32"
        description: "If rating is included, the the interaction is an explicit rating. Otherwise implicit"
        minimum: 1
        maximum: 5
      ts:
        type: 'string'
        format: 'date-time'